import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Files
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
//        classpath 'edu.sc.seis.gradle:launch4j:2.4.9'
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE'
        classpath 'org.yaml:snakeyaml:1.29'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:5.2.2'
    }
}

plugins {
    id "de.undercouch.download" version "4.1.1"
}

//this task is used to update the gradle wrapper properties to a new version
// it also ensures that wrapper scripts and gradle-wrapper.jar are updates if necessary
wrapper {
    gradleVersion = '8.8'
}

//Global Properties
ext {
    junit_version = '5.10.0'
    jackson_version = "2.16.1"
    spring_boot_version = "3.3.1"
    springdoc_version = "2.3.0"
    //version for external libraries
    slf4j_version = '1.7.36'
    jjobs_version = '0.9.36-SNAPSHOT'
    jaxb_version = "2.3.9"
    cdk_version = "2.8"

    picocli_version = '4.7.5'//'3.9.5'

    siriusTargetPlatform = SiriusPlatform.fromDescriptor((
            project.findProperty('build.sirius.platform') ?:
                    "${DefaultNativePlatform.getCurrentOperatingSystem().getName()}-${DefaultNativePlatform.getCurrentArchitecture().getName()}"
    ) as String)
    System.out.println("----> Following platform detected: " + siriusTargetPlatform)

    javaFX_modules = ['javafx-base', 'javafx-controls', 'javafx-swing', 'javafx-web', 'javafx-graphics', 'javafx-fxml', 'javafx-media']

    //locations of runtime libraries
    //jre path relative tu app home
    jre_path = 'zulu'
    lib_path = 'lib'
    native_path = 'native'

    libDir = project.findProperty("build.sirius.location.lib")
    System.out.println("----> LibDir: " + libDir)
    includeJreFX = Boolean.parseBoolean((project.findProperty("build.sirius.starter.jdk.include") ?: "false") as String)
    System.out.println("----> includeJreFX:  ${includeJreFX} | ${project.findProperty("build.sirius.starter.jdk.include")}")
    launch4jJDKPath = project.findProperty("build.sirius.starter.jdk.location")
    System.out.println("----> launch4jJDKPath:  ${launch4jJDKPath}")
    excludeCbcNative = project.findProperty("build.sirius.native.cbc.exclude")
    System.out.println("----> excludeCbcNative: " + excludeCbcNative)
    excludeJFX = Boolean.parseBoolean((project.findProperty("build.sirius.native.openjfx.exclude") ?: "false") as String)
    System.out.println("----> excludeJFX: ${excludeJFX} | ${project.findProperty("build.sirius.native.openjfx.exclude")}")

    jetbrains_version = "24.1.0"

    // mainly for IDE execution, ilp libs are not shipped with distributions anyways
    cplex_version = '12.7.1'
//    cplex_version = '20.1.0'
    gurobi_version = '9.1.1'
    cbc_version = '2.10.8.1'
    jakarta_version = '3.1.0'

    logger.lifecycle('reading build properties file...')
    props = new Properties()
    File propertiesFileIn = new File("${projectDir}/sirius_cli/src/main/resources/sirius_frontend.build.properties")
    propertiesFileIn.withReader("UTF8", {
        props.load(it)
    })

    // edit all these versions in sirius_cli/src/main/resources/....build.properties
    appName = props.getProperty('de.unijena.bioinf.utils.errorReport.softwareName').toLowerCase()
    siriusFrontendVersion = props.getProperty('de.unijena.bioinf.siriusFrontend.version')
    siriusVersion = props.getProperty('de.unijena.bioinf.sirius.version')
    fingeridVersion = props.getProperty('de.unijena.bioinf.fingerid.version')
    mztabm_version = props.getProperty('de.unijena.bioinf.mztabm.version')
}

/*################### DISTRIBUTION STUFF ################### */
project.ext.set("linSuffix", "linux")
project.ext.set("winSuffix", "win")
project.ext.set("macSuffix", "osx")
project.ext.set("arch", ['64', '32'])
project.ext.set("distPath", file('dist').absolutePath)


allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    targetCompatibility = 21

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = 'UTF-8'


    version = "$siriusFrontendVersion"
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {//public libs only so anybody can build the frontend without login
            url "https://bio.informatik.uni-jena.de/repository/libs-oss"
        }
        maven {
            url "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
        }
        maven {
            url "https://repo1.maven.org/maven2/" //glazed lists
        }
        maven {
            // only used for spectral hashs (Splash)
            url "http://gose.fiehnlab.ucdavis.edu:55000/content/groups/public"
            allowInsecureProtocol = true
        }
    }

    dependencies {
        implementation "org.jetbrains:annotations:$jetbrains_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"
        //NOTE: cannot be provided as transitive dependency
        implementation "jakarta.persistence:jakarta.persistence-api:$jakarta_version"
        implementation "org.glassfish.jaxb:jaxb-runtime:$jaxb_version"
        // TEST DEPENDENCIES
        testImplementation "org.slf4j:log4j-over-slf4j:$slf4j_version"
        testImplementation "org.slf4j:jcl-over-slf4j:$slf4j_version"
        // Aggregator dependency that also brings JUnit 5 parameterized tests etc.
        testImplementation("org.junit.jupiter:junit-jupiter:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
        // The Vintage engine is needed to be able to run JUnit 4 tests
        testImplementation("org.junit.vintage:junit-vintage-engine:$junit_version")
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    }

    test {
        useJUnitPlatform()
        maxHeapSize = "16G"
    }

    //there are some outdated incompatible trove dependencies in some libs.
    // this is to exclude them and enforce the one we need.
    configurations.configureEach {
        //replaced by log4j-over-slf4j
        it.exclude group: "log4j", module: "log4j"
        //replaced by jcl-over-slf4j
        it.exclude group: "commons-logging", module: "commons-logging"
        it.exclude module: 'trove4j'
    }

    configurations {
        compileClasspath {
            resolutionStrategy.force 'net.sf.trove4j:core:3.1.0'
        }
    }
}

subprojects {
    java {
        withJavadocJar()
        withSourcesJar()
    }
    //do not build javadoc for snapshot version to reduce build time
    components.java.withVariantsFromConfiguration(configurations.javadocElements) {
        if (version.toString().endsWith('-SNAPSHOT'))
            skip()
    }
    //build only artifacts from modules that contain code
    if (new File(projectDir, "src/main").isDirectory() && !"sirius_rest_service".equalsIgnoreCase(project.name) && !"buildSrc".equalsIgnoreCase(project.name)) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from project.components.java

                    pom {
                        licenses {
                            license {
                                name = 'GNU Affero General Public License, Version 3.0'
                                url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.register('refreshDownloadLinks') {
    File webPath = getBuildDir().toPath().resolve('tmp/webSite/').toFile()
    group = 'publishing'
    File outfile = new File(webPath, "sirius-download.md")
    outputs.file(outfile)

    doLast {
        webPath.mkdirs()
        def repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"

        List<String> lines = [
                "### SIRIUS+CSI:FingerID GUI and CLI - Version $version (${new Date().format('yyyy-MM-dd')})",
                "##### These versions include the Java Runtime Environment, so there is no need to install Java separately! Just download, install/unpack and execute.",
                "- for Windows (64bit): [msi](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-win64.msi) / " +
                        "[zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-win64.zip)",
                "- for Mac (64bit): [pkg](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-osx64.pkg) / " +
                        "[zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-osx64.zip)",
                "- for Linux (64bit): [zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-linux64.zip)",

                "",
                "### SIRIUS+CSI:FingerID Command-Line Interface only - Version $version (${new Date().format('yyyy-MM-dd')})",
                "##### These versions include the Java Runtime Environment, so there is no need to install Java separately! Just download, install/unpack and execute.",
                "- for Windows (64bit): [msi](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-win64-headless.msi) / " +
                        "[zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-win64-headless.zip)",
                "- for Mac (64bit): [pkg](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-osx64-headless.pkg) / " +
                        "[zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-osx64-headless.zip)",
                "- for Linux (64bit): [zip](https://github.com/sirius-ms/sirius/releases/download/v$version/sirius-$version-linux64-headless.zip)",
                ""
        ] as List

        Files.deleteIfExists(outfile.toPath())
        Files.write(outfile.toPath(), lines, StandardOpenOption.CREATE)
    }
}

String cleanVersion = fingeridVersion.toString().replace('-SNAPSHOT', '')
String minorVersion = "${cleanVersion.split('[.]')[0]}.${cleanVersion.split('[.]')[1]}"

tasks.register('refreshTrainingLinks') {
    File webPath = getBuildDir().toPath().resolve('tmp/webSite/').toFile()
    group = 'publishing'
    File outfile = new File(webPath, "sirius-training.md")
    outputs.file(outfile)

    doLast {
        webPath.mkdirs()
        List<String> lines = [
                "- https://www.csi-fingerid.uni-jena.de/v$minorVersion/api/fingerid/trainingstructures?predictor=1 (training structures for positive ion mode)",
                "- https://www.csi-fingerid.uni-jena.de/v$minorVersion/api/fingerid/trainingstructures?predictor=2 (training structures for negative ion mode)"
        ] as List

        Files.deleteIfExists(outfile.toPath())
        Files.write(outfile.toPath(), lines, StandardOpenOption.CREATE)
    }
}

tasks.register('refreshReadMe') {
    inputs.files(refreshDownloadLinks.outputs.files.singleFile, refreshTrainingLinks.outputs.files.singleFile)
    outputs.file("${getRootDir()}/README.md")
    group = 'publishing'

    doFirst {
        File dld = inputs.files.getAt(0)
        File clg = inputs.files.getAt(1)
        File out = outputs.files.singleFile

        List<String> links = Files.readAllLines(dld.toPath())
        List<String> training = Files.readAllLines(clg.toPath())


        Map<String, String> keywords = ['<!--begin download-->': '<!--end download-->', '<!--begin training-->': '<!--end training-->']
        Map<String, List<String>> replacements = ['<!--begin download-->': links, '<!--begin training-->': training]

        List<String> lines = Files.readAllLines(out.toPath())
        List<String> nuLines = new LinkedList<>()
        String keyword = null
        String keywordEnd = null

        lines.each { String line ->
            if (line.startsWith("[![Generic badge](https://img.shields.io/badge/Version-")) {
                nuLines.add("[![Generic badge](https://img.shields.io/badge/Version-${project.version.replace("-", "--")}-informational.svg)](https://shields.io/)")
            } else if (keyword == null) {
                keywordEnd = keywords.get(line)
                nuLines.add(line)
                if (keywordEnd != null) {
                    keyword = line
                    def r = replacements.get(keyword)

                    nuLines.add('')
                    nuLines.addAll(r)
                }
            } else if (line.equals(keywordEnd)) {
                nuLines.add('')
                nuLines.add(line)
                keyword = null
                keywordEnd = null
            }
        }


        Files.deleteIfExists(out.toPath())
        Files.write(out.toPath(), nuLines, StandardOpenOption.CREATE)
    }
}
refreshReadMe.dependsOn refreshTrainingLinks
refreshReadMe.dependsOn refreshDownloadLinks

// publication artifactory
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"
            username = project.findProperty('de.unijena.bioinf.build.artifactory.username')
            password = project.findProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            //Publish every distribution to Artifactory
            publications("siriusMS")
            publications("manual")
        }
    }
}

artifactoryPublish.dependsOn 'refreshDownloadLinks'
artifactoryPublish.dependsOn 'refreshReadMe'