import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "com.jfrog.artifactory" version "4.25.1"
}

//this task is used to update the gradle wrapper properties to a new version
// it also ensures that wrapper scripts and gradle-wrapper.jar are updates if necessary
wrapper{
    gradleVersion = '6.9.3'
}

//Global Properties
ext {
    logger.lifecycle('reading build properties file...')
    props = new Properties()
    file("${projectDir}/chemistry_base/src/main/resources/sirius.build.properties").withReader("UTF8", {
        props.load(it)
    })
    file("${projectDir}/fingerid_base_oss/src/main/resources/csi_fingerid.build.properties").withReader("UTF8", {
        props.load(it)
    })

    siriusVersion = props.getProperty('de.unijena.bioinf.sirius.version')
    fingeridVersion = props.getProperty('de.unijena.bioinf.fingerid.version')
    //version for external libraries
    jjobs_version = '0.9.35'
    slf4j_version = '1.7.36'
    jackson_version = '2.14.2'
    math3_version = '3.6.1'
    cbc_version = props.getProperty('de.unijena.bioinf.sirius.build.cbc_version')
    glpk_version = props.getProperty('de.unijena.bioinf.sirius.build.glpk_version')
    gurobi_version = props.getProperty('de.unijena.bioinf.sirius.build.gurobi_version')
    cplex_version = props.getProperty('de.unijena.bioinf.sirius.build.cplex_version')
    cdk_version = "2.8"
    jetbrains_version = "23.0.0"
    okhttp_version = "4.10.0"
    fastutil_version = '8.5.12' //replaces trove

    jewelcli_version = '0.8.9'
    //todo wenn wir die inhouse clis auch ind das frontend moven haben wir keinerlei distribution zeug mehr in sirius

    commons_email_version = '1.5'
    oshi_version = '6.1.5'
    json_version = '1.0'
    json_impl_version = "1.0.4"
    psql_version = "42.2.1"
    jdbi_version = '3.34.0'

    liblinear_version = "1.95"
    libsvm_version = "3.20"

    guava_version = '31.1-jre'


}

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = 17
    targetCompatibility = 17

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = 'UTF-8'

    version = project.siriusVersion
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://bio.informatik.uni-jena.de/repository/libs-oss"
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }
        maven {
            url "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/" //mzml parser
        }
        maven {
            url "http://eulergui.sourceforge.net/maven2/" //FTAlign stuff
            allowInsecureProtocol = true
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        api "org.jetbrains:annotations:$jetbrains_version"
        api "it.unimi.dsi:fastutil:$fastutil_version"

//        api 'org.apache.commons:commons-collections4:4.4'
        //try to remove and replace with basic java or fastutil
        api group: 'com.google.guava', name: 'guava', version: '31.1-jre'
        api "org.apache.commons:commons-math3:$math3_version"
        api 'org.apache.commons:commons-compress:1.21'
        api 'org.apache.commons:commons-lang3:3.12.0'
        api 'commons-io:commons-io:2.11.0' //maybe provide via io package?

        api "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        api "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"

        api 'com.googlecode.concurrent-locks:concurrent-locks:1.0.0'

        api group: 'de.unijena.bioinf', name: 'jjobs-core', version:"$jjobs_version"
        api group: 'org.slf4j', name: 'slf4j-api', version: "$slf4j_version"

        testImplementation group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
        testImplementation group: 'de.unijena.bioinf', name: 'jjobs-swing', version:"$jjobs_version"
        testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    }

    task sourceJar(type: Jar) {
        group = 'build'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        group = 'documentation'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                //adding submodules to pom
                pom.withXml {
                    if (!project.subprojects.isEmpty()) {
                        def modlules = asNode().appendNode('modules', '')
                        project.subprojects.each {
                            new Node(modlules, 'module', it.name)
                        }
                    }
                }
//                artifacts = []
            }
        }
    }

   /* sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "configs"
            }
        }
    }
*/
    /*task cleanConfig {
        group = 'build'
        doLast {
            def f = file("${projectDir}/configs")
            if (f.exists())
                f.deleteDir()
        }
    }
    clean.dependsOn cleanConfig*/
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

configure(javaProjects()) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
//                from project.components.java
                if (version.toString().endsWith('-SNAPSHOT'))
                    artifacts =  [jar, sourceJar]
                else
                    artifacts = [jar, sourceJar, javadocJar]
            }
        }
    }
}

//artifactoryPublish.skip = true
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = project.findProperty('de.unijena.bioinf.build.artifactory.username')
            password = project.findProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}

