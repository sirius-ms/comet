/*
 *  This file is part of the SIRIUS libraries for analyzing MS and MS/MS data
 *
 *  Copyright (C) 2024 Bright Giant GmbH
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with SIRIUS.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *  https://openapi-generator.tech
 *  Do not edit the class manually.
 */


package io.sirius.ms.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.sirius.ms.sdk.model.ValueType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TagDefinitionImport
 */
@JsonPropertyOrder({
  TagDefinitionImport.JSON_PROPERTY_TAG_NAME,
  TagDefinitionImport.JSON_PROPERTY_DESCRIPTION,
  TagDefinitionImport.JSON_PROPERTY_VALUE_TYPE,
  TagDefinitionImport.JSON_PROPERTY_POSSIBLE_VALUES,
  TagDefinitionImport.JSON_PROPERTY_TAG_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class TagDefinitionImport {
  public static final String JSON_PROPERTY_TAG_NAME = "tagName";
  private String tagName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_VALUE_TYPE = "valueType";
  private ValueType valueType;

  public static final String JSON_PROPERTY_POSSIBLE_VALUES = "possibleValues";
  private List<Object> possibleValues = new ArrayList<>();

  public static final String JSON_PROPERTY_TAG_TYPE = "tagType";
  private String tagType;

  public TagDefinitionImport() {
  }

  public TagDefinitionImport tagName(String tagName) {
    
    this.tagName = tagName;
    return this;
  }

   /**
   * Name of this tag defined by this definition (key)
   * @return tagName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTagName() {
    return tagName;
  }


  @JsonProperty(JSON_PROPERTY_TAG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagName(String tagName) {
    this.tagName = tagName;
  }

  public TagDefinitionImport description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }

  public TagDefinitionImport valueType(ValueType valueType) {
    
    this.valueType = valueType;
    return this;
  }

   /**
   * Get valueType
   * @return valueType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ValueType getValueType() {
    return valueType;
  }


  @JsonProperty(JSON_PROPERTY_VALUE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValueType(ValueType valueType) {
    this.valueType = valueType;
  }

  public TagDefinitionImport possibleValues(List<Object> possibleValues) {
    
    this.possibleValues = possibleValues;
    return this;
  }

  public TagDefinitionImport addPossibleValuesItem(Object possibleValuesItem) {
    if (this.possibleValues == null) {
      this.possibleValues = new ArrayList<>();
    }
    this.possibleValues.add(possibleValuesItem);
    return this;
  }

   /**
   * Get possibleValues
   * @return possibleValues
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSSIBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getPossibleValues() {
    return possibleValues;
  }


  @JsonProperty(JSON_PROPERTY_POSSIBLE_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPossibleValues(List<Object> possibleValues) {
    this.possibleValues = possibleValues;
  }

  public TagDefinitionImport tagType(String tagType) {
    
    this.tagType = tagType;
    return this;
  }

   /**
   * A simple string based identifier to specify the type/scope/purpose of this tag.
   * @return tagType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTagType() {
    return tagType;
  }


  @JsonProperty(JSON_PROPERTY_TAG_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTagType(String tagType) {
    this.tagType = tagType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagDefinitionImport tagDefinitionImport = (TagDefinitionImport) o;
    return Objects.equals(this.tagName, tagDefinitionImport.tagName) &&
        Objects.equals(this.description, tagDefinitionImport.description) &&
        Objects.equals(this.valueType, tagDefinitionImport.valueType) &&
        Objects.equals(this.possibleValues, tagDefinitionImport.possibleValues) &&
        Objects.equals(this.tagType, tagDefinitionImport.tagType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagName, description, valueType, possibleValues, tagType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagDefinitionImport {\n");
    sb.append("    tagName: ").append(toIndentedString(tagName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    possibleValues: ").append(toIndentedString(possibleValues)).append("\n");
    sb.append("    tagType: ").append(toIndentedString(tagType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

