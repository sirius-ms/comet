/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StringTagFilter
 */
@JsonPropertyOrder({
  StringTagFilter.JSON_PROPERTY_EQUALS,
  StringTagFilter.JSON_PROPERTY_NOT_EQUALS,
  StringTagFilter.JSON_PROPERTY_CONTAINS,
  StringTagFilter.JSON_PROPERTY_REGEX_MATCH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class StringTagFilter {
  public static final String JSON_PROPERTY_EQUALS = "equals";
  private String equals;

  public static final String JSON_PROPERTY_NOT_EQUALS = "notEquals";
  private String notEquals;

  public static final String JSON_PROPERTY_CONTAINS = "contains";
  private String contains;

  public static final String JSON_PROPERTY_REGEX_MATCH = "regexMatch";
  private String regexMatch;

  public StringTagFilter() {
  }

  public StringTagFilter equals(String equals) {
    
    this.equals = equals;
    return this;
  }

   /**
   * Get equals
   * @return equals
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEquals() {
    return equals;
  }


  @JsonProperty(JSON_PROPERTY_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEquals(String equals) {
    this.equals = equals;
  }

  public StringTagFilter notEquals(String notEquals) {
    
    this.notEquals = notEquals;
    return this;
  }

   /**
   * Get notEquals
   * @return notEquals
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOT_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotEquals() {
    return notEquals;
  }


  @JsonProperty(JSON_PROPERTY_NOT_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotEquals(String notEquals) {
    this.notEquals = notEquals;
  }

  public StringTagFilter contains(String contains) {
    
    this.contains = contains;
    return this;
  }

   /**
   * Get contains
   * @return contains
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContains() {
    return contains;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContains(String contains) {
    this.contains = contains;
  }

  public StringTagFilter regexMatch(String regexMatch) {
    
    this.regexMatch = regexMatch;
    return this;
  }

   /**
   * Get regexMatch
   * @return regexMatch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGEX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegexMatch() {
    return regexMatch;
  }


  @JsonProperty(JSON_PROPERTY_REGEX_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegexMatch(String regexMatch) {
    this.regexMatch = regexMatch;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringTagFilter stringTagFilter = (StringTagFilter) o;
    return Objects.equals(this.equals, stringTagFilter.equals) &&
        Objects.equals(this.notEquals, stringTagFilter.notEquals) &&
        Objects.equals(this.contains, stringTagFilter.contains) &&
        Objects.equals(this.regexMatch, stringTagFilter.regexMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equals, notEquals, contains, regexMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringTagFilter {\n");
    sb.append("    equals: ").append(toIndentedString(equals)).append("\n");
    sb.append("    notEquals: ").append(toIndentedString(notEquals)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    regexMatch: ").append(toIndentedString(regexMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

