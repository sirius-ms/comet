/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * QuantificationTable
 */
@JsonPropertyOrder({
  QuantificationTable.JSON_PROPERTY_QUANTIFICATION_TYPE,
  QuantificationTable.JSON_PROPERTY_ROW_TYPE,
  QuantificationTable.JSON_PROPERTY_COLUMN_TYPE,
  QuantificationTable.JSON_PROPERTY_ROW_IDS,
  QuantificationTable.JSON_PROPERTY_COLUMN_IDS,
  QuantificationTable.JSON_PROPERTY_ROW_NAMES,
  QuantificationTable.JSON_PROPERTY_COLUMN_NAMES,
  QuantificationTable.JSON_PROPERTY_VALUES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class QuantificationTable {
  /**
   * Gets or Sets quantificationType
   */
  public enum QuantificationTypeEnum {
    APEX_HEIGHT("APEX_HEIGHT");

    private String value;

    QuantificationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static QuantificationTypeEnum fromValue(String value) {
      for (QuantificationTypeEnum b : QuantificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_QUANTIFICATION_TYPE = "quantificationType";
  private QuantificationTypeEnum quantificationType;

  /**
   * Gets or Sets rowType
   */
  public enum RowTypeEnum {
    FEATURES("FEATURES");

    private String value;

    RowTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RowTypeEnum fromValue(String value) {
      for (RowTypeEnum b : RowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROW_TYPE = "rowType";
  private RowTypeEnum rowType;

  /**
   * Gets or Sets columnType
   */
  public enum ColumnTypeEnum {
    SAMPLES("SAMPLES");

    private String value;

    ColumnTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColumnTypeEnum fromValue(String value) {
      for (ColumnTypeEnum b : ColumnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COLUMN_TYPE = "columnType";
  private ColumnTypeEnum columnType;

  public static final String JSON_PROPERTY_ROW_IDS = "rowIds";
  private List<Long> rowIds;

  public static final String JSON_PROPERTY_COLUMN_IDS = "columnIds";
  private List<Long> columnIds;

  public static final String JSON_PROPERTY_ROW_NAMES = "rowNames";
  private List<String> rowNames;

  public static final String JSON_PROPERTY_COLUMN_NAMES = "columnNames";
  private List<String> columnNames;

  public static final String JSON_PROPERTY_VALUES = "values";
  private List<List<Double>> values = new ArrayList<>();

  public QuantificationTable() {
  }

  public QuantificationTable quantificationType(QuantificationTypeEnum quantificationType) {
    
    this.quantificationType = quantificationType;
    return this;
  }

   /**
   * Get quantificationType
   * @return quantificationType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuantificationTypeEnum getQuantificationType() {
    return quantificationType;
  }


  @JsonProperty(JSON_PROPERTY_QUANTIFICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantificationType(QuantificationTypeEnum quantificationType) {
    this.quantificationType = quantificationType;
  }

  public QuantificationTable rowType(RowTypeEnum rowType) {
    
    this.rowType = rowType;
    return this;
  }

   /**
   * Get rowType
   * @return rowType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RowTypeEnum getRowType() {
    return rowType;
  }


  @JsonProperty(JSON_PROPERTY_ROW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowType(RowTypeEnum rowType) {
    this.rowType = rowType;
  }

  public QuantificationTable columnType(ColumnTypeEnum columnType) {
    
    this.columnType = columnType;
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ColumnTypeEnum getColumnType() {
    return columnType;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnType(ColumnTypeEnum columnType) {
    this.columnType = columnType;
  }

  public QuantificationTable rowIds(List<Long> rowIds) {
    
    this.rowIds = rowIds;
    return this;
  }

  public QuantificationTable addRowIdsItem(Long rowIdsItem) {
    if (this.rowIds == null) {
      this.rowIds = new ArrayList<>();
    }
    this.rowIds.add(rowIdsItem);
    return this;
  }

   /**
   * Get rowIds
   * @return rowIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getRowIds() {
    return rowIds;
  }


  @JsonProperty(JSON_PROPERTY_ROW_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowIds(List<Long> rowIds) {
    this.rowIds = rowIds;
  }

  public QuantificationTable columnIds(List<Long> columnIds) {
    
    this.columnIds = columnIds;
    return this;
  }

  public QuantificationTable addColumnIdsItem(Long columnIdsItem) {
    if (this.columnIds == null) {
      this.columnIds = new ArrayList<>();
    }
    this.columnIds.add(columnIdsItem);
    return this;
  }

   /**
   * Get columnIds
   * @return columnIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getColumnIds() {
    return columnIds;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnIds(List<Long> columnIds) {
    this.columnIds = columnIds;
  }

  public QuantificationTable rowNames(List<String> rowNames) {
    
    this.rowNames = rowNames;
    return this;
  }

  public QuantificationTable addRowNamesItem(String rowNamesItem) {
    if (this.rowNames == null) {
      this.rowNames = new ArrayList<>();
    }
    this.rowNames.add(rowNamesItem);
    return this;
  }

   /**
   * Get rowNames
   * @return rowNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRowNames() {
    return rowNames;
  }


  @JsonProperty(JSON_PROPERTY_ROW_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowNames(List<String> rowNames) {
    this.rowNames = rowNames;
  }

  public QuantificationTable columnNames(List<String> columnNames) {
    
    this.columnNames = columnNames;
    return this;
  }

  public QuantificationTable addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

   /**
   * Get columnNames
   * @return columnNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getColumnNames() {
    return columnNames;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }

  public QuantificationTable values(List<List<Double>> values) {
    
    this.values = values;
    return this;
  }

  public QuantificationTable addValuesItem(List<Double> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Double>> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(List<List<Double>> values) {
    this.values = values;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantificationTable quantificationTable = (QuantificationTable) o;
    return Objects.equals(this.quantificationType, quantificationTable.quantificationType) &&
        Objects.equals(this.rowType, quantificationTable.rowType) &&
        Objects.equals(this.columnType, quantificationTable.columnType) &&
        Objects.equals(this.rowIds, quantificationTable.rowIds) &&
        Objects.equals(this.columnIds, quantificationTable.columnIds) &&
        Objects.equals(this.rowNames, quantificationTable.rowNames) &&
        Objects.equals(this.columnNames, quantificationTable.columnNames) &&
        Objects.equals(this.values, quantificationTable.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantificationType, rowType, columnType, rowIds, columnIds, rowNames, columnNames, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantificationTable {\n");
    sb.append("    quantificationType: ").append(toIndentedString(quantificationType)).append("\n");
    sb.append("    rowType: ").append(toIndentedString(rowType)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    rowIds: ").append(toIndentedString(rowIds)).append("\n");
    sb.append("    columnIds: ").append(toIndentedString(columnIds)).append("\n");
    sb.append("    rowNames: ").append(toIndentedString(rowNames)).append("\n");
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

