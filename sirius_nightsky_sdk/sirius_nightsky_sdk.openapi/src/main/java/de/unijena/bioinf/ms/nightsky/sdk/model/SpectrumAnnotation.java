/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SpectrumAnnotation
 */
@JsonPropertyOrder({
  SpectrumAnnotation.JSON_PROPERTY_MOLECULAR_FORMULA,
  SpectrumAnnotation.JSON_PROPERTY_IONIZATION,
  SpectrumAnnotation.JSON_PROPERTY_EXACT_MASS,
  SpectrumAnnotation.JSON_PROPERTY_MASS_DEVIATION_MZ,
  SpectrumAnnotation.JSON_PROPERTY_MASS_DEVIATION_PPM,
  SpectrumAnnotation.JSON_PROPERTY_STRUCTURE_ANNOTATION_SMILES,
  SpectrumAnnotation.JSON_PROPERTY_STRUCTURE_ANNOTATION_SCORE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class SpectrumAnnotation {
  public static final String JSON_PROPERTY_MOLECULAR_FORMULA = "molecularFormula";
  private String molecularFormula;

  public static final String JSON_PROPERTY_IONIZATION = "ionization";
  private String ionization;

  public static final String JSON_PROPERTY_EXACT_MASS = "exactMass";
  private Double exactMass;

  public static final String JSON_PROPERTY_MASS_DEVIATION_MZ = "massDeviationMz";
  private Double massDeviationMz;

  public static final String JSON_PROPERTY_MASS_DEVIATION_PPM = "massDeviationPpm";
  private Double massDeviationPpm;

  public static final String JSON_PROPERTY_STRUCTURE_ANNOTATION_SMILES = "structureAnnotationSmiles";
  private String structureAnnotationSmiles;

  public static final String JSON_PROPERTY_STRUCTURE_ANNOTATION_SCORE = "structureAnnotationScore";
  private Double structureAnnotationScore;

  public SpectrumAnnotation() {
  }

  public SpectrumAnnotation molecularFormula(String molecularFormula) {
    
    this.molecularFormula = molecularFormula;
    return this;
  }

   /**
   * Molecular formula that has been annotated to this spectrum
   * @return molecularFormula
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MOLECULAR_FORMULA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMolecularFormula() {
    return molecularFormula;
  }


  @JsonProperty(JSON_PROPERTY_MOLECULAR_FORMULA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMolecularFormula(String molecularFormula) {
    this.molecularFormula = molecularFormula;
  }

  public SpectrumAnnotation ionization(String ionization) {
    
    this.ionization = ionization;
    return this;
  }

   /**
   * Ionization that has been annotated to this spectrum
   * @return ionization
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IONIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIonization() {
    return ionization;
  }


  @JsonProperty(JSON_PROPERTY_IONIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIonization(String ionization) {
    this.ionization = ionization;
  }

  public SpectrumAnnotation exactMass(Double exactMass) {
    
    this.exactMass = exactMass;
    return this;
  }

   /**
   * Exact mass based on the annotated molecular formula and ionization
   * @return exactMass
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXACT_MASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getExactMass() {
    return exactMass;
  }


  @JsonProperty(JSON_PROPERTY_EXACT_MASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExactMass(Double exactMass) {
    this.exactMass = exactMass;
  }

  public SpectrumAnnotation massDeviationMz(Double massDeviationMz) {
    
    this.massDeviationMz = massDeviationMz;
    return this;
  }

   /**
   * Absolute mass deviation of the exact mass to the precursor mass (precursorMz) of this spectrum in mDa
   * @return massDeviationMz
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASS_DEVIATION_MZ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMassDeviationMz() {
    return massDeviationMz;
  }


  @JsonProperty(JSON_PROPERTY_MASS_DEVIATION_MZ)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMassDeviationMz(Double massDeviationMz) {
    this.massDeviationMz = massDeviationMz;
  }

  public SpectrumAnnotation massDeviationPpm(Double massDeviationPpm) {
    
    this.massDeviationPpm = massDeviationPpm;
    return this;
  }

   /**
   * Relative mass deviation of the exact mass to the precursor mass (precursorMz) of this spectrum in ppm
   * @return massDeviationPpm
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASS_DEVIATION_PPM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getMassDeviationPpm() {
    return massDeviationPpm;
  }


  @JsonProperty(JSON_PROPERTY_MASS_DEVIATION_PPM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMassDeviationPpm(Double massDeviationPpm) {
    this.massDeviationPpm = massDeviationPpm;
  }

  public SpectrumAnnotation structureAnnotationSmiles(String structureAnnotationSmiles) {
    
    this.structureAnnotationSmiles = structureAnnotationSmiles;
    return this;
  }

   /**
   * Smiles of the structure candidate used to derive substructure peak annotations via epimetheus insilico fragmentation  Substructure highlighting (bond and atom indices) refer to this specific SMILES.  If you standardize or canonicalize this SMILES in any way the indices of substructure highlighting might  not match correctly anymore.   Null if substructure annotation not available or not requested.
   * @return structureAnnotationSmiles
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_ANNOTATION_SMILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStructureAnnotationSmiles() {
    return structureAnnotationSmiles;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_ANNOTATION_SMILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureAnnotationSmiles(String structureAnnotationSmiles) {
    this.structureAnnotationSmiles = structureAnnotationSmiles;
  }

  public SpectrumAnnotation structureAnnotationScore(Double structureAnnotationScore) {
    
    this.structureAnnotationScore = structureAnnotationScore;
    return this;
  }

   /**
   * Overall score of all substructure annotations computed for this structure candidate (structureAnnotationSmiles)   Null if substructure annotation not available or not requested.
   * @return structureAnnotationScore
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_ANNOTATION_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getStructureAnnotationScore() {
    return structureAnnotationScore;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_ANNOTATION_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureAnnotationScore(Double structureAnnotationScore) {
    this.structureAnnotationScore = structureAnnotationScore;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpectrumAnnotation spectrumAnnotation = (SpectrumAnnotation) o;
    return Objects.equals(this.molecularFormula, spectrumAnnotation.molecularFormula) &&
        Objects.equals(this.ionization, spectrumAnnotation.ionization) &&
        Objects.equals(this.exactMass, spectrumAnnotation.exactMass) &&
        Objects.equals(this.massDeviationMz, spectrumAnnotation.massDeviationMz) &&
        Objects.equals(this.massDeviationPpm, spectrumAnnotation.massDeviationPpm) &&
        Objects.equals(this.structureAnnotationSmiles, spectrumAnnotation.structureAnnotationSmiles) &&
        Objects.equals(this.structureAnnotationScore, spectrumAnnotation.structureAnnotationScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(molecularFormula, ionization, exactMass, massDeviationMz, massDeviationPpm, structureAnnotationSmiles, structureAnnotationScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpectrumAnnotation {\n");
    sb.append("    molecularFormula: ").append(toIndentedString(molecularFormula)).append("\n");
    sb.append("    ionization: ").append(toIndentedString(ionization)).append("\n");
    sb.append("    exactMass: ").append(toIndentedString(exactMass)).append("\n");
    sb.append("    massDeviationMz: ").append(toIndentedString(massDeviationMz)).append("\n");
    sb.append("    massDeviationPpm: ").append(toIndentedString(massDeviationPpm)).append("\n");
    sb.append("    structureAnnotationSmiles: ").append(toIndentedString(structureAnnotationSmiles)).append("\n");
    sb.append("    structureAnnotationScore: ").append(toIndentedString(structureAnnotationScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

