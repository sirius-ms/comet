/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ProjectChangeEvent
 */
@JsonPropertyOrder({
  ProjectChangeEvent.JSON_PROPERTY_EVENT_TYPE,
  ProjectChangeEvent.JSON_PROPERTY_PROJECT_ID,
  ProjectChangeEvent.JSON_PROPERTY_COMPOUND_ID,
  ProjectChangeEvent.JSON_PROPERTY_FEATURED_ID,
  ProjectChangeEvent.JSON_PROPERTY_FORMULA_ID,
  ProjectChangeEvent.JSON_PROPERTY_STRUCTURE_IN_CH_I_KEY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class ProjectChangeEvent {
  /**
   * Gets or Sets eventType
   */
  public enum EventTypeEnum {
    PROJECT_OPENED("PROJECT_OPENED"),
    
    PROJECT_MOVED("PROJECT_MOVED"),
    
    PROJECT_CLOSED("PROJECT_CLOSED"),
    
    FEATURE_CREATED("FEATURE_CREATED"),
    
    FEATURE_UPDATED("FEATURE_UPDATED"),
    
    FEATURE_DELETED("FEATURE_DELETED"),
    
    RESULT_CREATED("RESULT_CREATED"),
    
    RESULT_UPDATED("RESULT_UPDATED"),
    
    RESULT_DELETED("RESULT_DELETED");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private EventTypeEnum eventType;

  public static final String JSON_PROPERTY_PROJECT_ID = "projectId";
  private String projectId;

  public static final String JSON_PROPERTY_COMPOUND_ID = "compoundId";
  private String compoundId;

  public static final String JSON_PROPERTY_FEATURED_ID = "featuredId";
  private String featuredId;

  public static final String JSON_PROPERTY_FORMULA_ID = "formulaId";
  private String formulaId;

  public static final String JSON_PROPERTY_STRUCTURE_IN_CH_I_KEY = "structureInChIKey";
  private String structureInChIKey;

  public ProjectChangeEvent() {
  }

  public ProjectChangeEvent eventType(EventTypeEnum eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }

  public ProjectChangeEvent projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProjectId() {
    return projectId;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public ProjectChangeEvent compoundId(String compoundId) {
    
    this.compoundId = compoundId;
    return this;
  }

   /**
   * Get compoundId
   * @return compoundId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPOUND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompoundId() {
    return compoundId;
  }


  @JsonProperty(JSON_PROPERTY_COMPOUND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompoundId(String compoundId) {
    this.compoundId = compoundId;
  }

  public ProjectChangeEvent featuredId(String featuredId) {
    
    this.featuredId = featuredId;
    return this;
  }

   /**
   * Get featuredId
   * @return featuredId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEATURED_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeaturedId() {
    return featuredId;
  }


  @JsonProperty(JSON_PROPERTY_FEATURED_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeaturedId(String featuredId) {
    this.featuredId = featuredId;
  }

  public ProjectChangeEvent formulaId(String formulaId) {
    
    this.formulaId = formulaId;
    return this;
  }

   /**
   * Get formulaId
   * @return formulaId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMULA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormulaId() {
    return formulaId;
  }


  @JsonProperty(JSON_PROPERTY_FORMULA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormulaId(String formulaId) {
    this.formulaId = formulaId;
  }

  public ProjectChangeEvent structureInChIKey(String structureInChIKey) {
    
    this.structureInChIKey = structureInChIKey;
    return this;
  }

   /**
   * Get structureInChIKey
   * @return structureInChIKey
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRUCTURE_IN_CH_I_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStructureInChIKey() {
    return structureInChIKey;
  }


  @JsonProperty(JSON_PROPERTY_STRUCTURE_IN_CH_I_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStructureInChIKey(String structureInChIKey) {
    this.structureInChIKey = structureInChIKey;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectChangeEvent projectChangeEvent = (ProjectChangeEvent) o;
    return Objects.equals(this.eventType, projectChangeEvent.eventType) &&
        Objects.equals(this.projectId, projectChangeEvent.projectId) &&
        Objects.equals(this.compoundId, projectChangeEvent.compoundId) &&
        Objects.equals(this.featuredId, projectChangeEvent.featuredId) &&
        Objects.equals(this.formulaId, projectChangeEvent.formulaId) &&
        Objects.equals(this.structureInChIKey, projectChangeEvent.structureInChIKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, projectId, compoundId, featuredId, formulaId, structureInChIKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectChangeEvent {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    compoundId: ").append(toIndentedString(compoundId)).append("\n");
    sb.append("    featuredId: ").append(toIndentedString(featuredId)).append("\n");
    sb.append("    formulaId: ").append(toIndentedString(formulaId)).append("\n");
    sb.append("    structureInChIKey: ").append(toIndentedString(structureInChIKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

