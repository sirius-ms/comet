/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.SpectralLibraryMatch;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SpectralLibraryMatchSummary
 */
@JsonPropertyOrder({
  SpectralLibraryMatchSummary.JSON_PROPERTY_BEST_MATCH,
  SpectralLibraryMatchSummary.JSON_PROPERTY_SPECTRAL_MATCH_COUNT,
  SpectralLibraryMatchSummary.JSON_PROPERTY_REFERENCE_SPECTRA_COUNT,
  SpectralLibraryMatchSummary.JSON_PROPERTY_DATABASE_COMPOUND_COUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class SpectralLibraryMatchSummary {
  public static final String JSON_PROPERTY_BEST_MATCH = "bestMatch";
  private SpectralLibraryMatch bestMatch;

  public static final String JSON_PROPERTY_SPECTRAL_MATCH_COUNT = "spectralMatchCount";
  private Long spectralMatchCount;

  public static final String JSON_PROPERTY_REFERENCE_SPECTRA_COUNT = "referenceSpectraCount";
  private Integer referenceSpectraCount;

  public static final String JSON_PROPERTY_DATABASE_COMPOUND_COUNT = "databaseCompoundCount";
  private Integer databaseCompoundCount;

  public SpectralLibraryMatchSummary() {
  }

  public SpectralLibraryMatchSummary bestMatch(SpectralLibraryMatch bestMatch) {
    
    this.bestMatch = bestMatch;
    return this;
  }

   /**
   * Get bestMatch
   * @return bestMatch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEST_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SpectralLibraryMatch getBestMatch() {
    return bestMatch;
  }


  @JsonProperty(JSON_PROPERTY_BEST_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBestMatch(SpectralLibraryMatch bestMatch) {
    this.bestMatch = bestMatch;
  }

  public SpectralLibraryMatchSummary spectralMatchCount(Long spectralMatchCount) {
    
    this.spectralMatchCount = spectralMatchCount;
    return this;
  }

   /**
   * Get spectralMatchCount
   * @return spectralMatchCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SPECTRAL_MATCH_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getSpectralMatchCount() {
    return spectralMatchCount;
  }


  @JsonProperty(JSON_PROPERTY_SPECTRAL_MATCH_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSpectralMatchCount(Long spectralMatchCount) {
    this.spectralMatchCount = spectralMatchCount;
  }

  public SpectralLibraryMatchSummary referenceSpectraCount(Integer referenceSpectraCount) {
    
    this.referenceSpectraCount = referenceSpectraCount;
    return this;
  }

   /**
   * Get referenceSpectraCount
   * @return referenceSpectraCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REFERENCE_SPECTRA_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getReferenceSpectraCount() {
    return referenceSpectraCount;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_SPECTRA_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferenceSpectraCount(Integer referenceSpectraCount) {
    this.referenceSpectraCount = referenceSpectraCount;
  }

  public SpectralLibraryMatchSummary databaseCompoundCount(Integer databaseCompoundCount) {
    
    this.databaseCompoundCount = databaseCompoundCount;
    return this;
  }

   /**
   * Get databaseCompoundCount
   * @return databaseCompoundCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATABASE_COMPOUND_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDatabaseCompoundCount() {
    return databaseCompoundCount;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_COMPOUND_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatabaseCompoundCount(Integer databaseCompoundCount) {
    this.databaseCompoundCount = databaseCompoundCount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpectralLibraryMatchSummary spectralLibraryMatchSummary = (SpectralLibraryMatchSummary) o;
    return Objects.equals(this.bestMatch, spectralLibraryMatchSummary.bestMatch) &&
        Objects.equals(this.spectralMatchCount, spectralLibraryMatchSummary.spectralMatchCount) &&
        Objects.equals(this.referenceSpectraCount, spectralLibraryMatchSummary.referenceSpectraCount) &&
        Objects.equals(this.databaseCompoundCount, spectralLibraryMatchSummary.databaseCompoundCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestMatch, spectralMatchCount, referenceSpectraCount, databaseCompoundCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpectralLibraryMatchSummary {\n");
    sb.append("    bestMatch: ").append(toIndentedString(bestMatch)).append("\n");
    sb.append("    spectralMatchCount: ").append(toIndentedString(spectralMatchCount)).append("\n");
    sb.append("    referenceSpectraCount: ").append(toIndentedString(referenceSpectraCount)).append("\n");
    sb.append("    databaseCompoundCount: ").append(toIndentedString(databaseCompoundCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

