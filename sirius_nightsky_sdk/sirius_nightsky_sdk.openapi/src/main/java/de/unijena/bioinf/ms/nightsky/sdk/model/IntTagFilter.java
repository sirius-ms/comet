/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.unijena.bioinf.ms.nightsky.sdk.model.TagFilter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * IntTagFilter
 */
@JsonPropertyOrder({
  IntTagFilter.JSON_PROPERTY_EQUALS,
  IntTagFilter.JSON_PROPERTY_LESS_THAN,
  IntTagFilter.JSON_PROPERTY_LESS_THAN_EQUALS,
  IntTagFilter.JSON_PROPERTY_GREATER_THAN,
  IntTagFilter.JSON_PROPERTY_GREATER_THAN_EQUALS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)

public class IntTagFilter extends TagFilter {
  public static final String JSON_PROPERTY_EQUALS = "equals";
  private Integer equals;

  public static final String JSON_PROPERTY_LESS_THAN = "lessThan";
  private Integer lessThan;

  public static final String JSON_PROPERTY_LESS_THAN_EQUALS = "lessThanEquals";
  private Integer lessThanEquals;

  public static final String JSON_PROPERTY_GREATER_THAN = "greaterThan";
  private Integer greaterThan;

  public static final String JSON_PROPERTY_GREATER_THAN_EQUALS = "greaterThanEquals";
  private Integer greaterThanEquals;

  public IntTagFilter() {

  }

  public IntTagFilter equals(Integer equals) {
    
    this.equals = equals;
    return this;
  }

   /**
   * Get equals
   * @return equals
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEquals() {
    return equals;
  }


  @JsonProperty(JSON_PROPERTY_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEquals(Integer equals) {
    this.equals = equals;
  }

  public IntTagFilter lessThan(Integer lessThan) {
    
    this.lessThan = lessThan;
    return this;
  }

   /**
   * Get lessThan
   * @return lessThan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LESS_THAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLessThan() {
    return lessThan;
  }


  @JsonProperty(JSON_PROPERTY_LESS_THAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLessThan(Integer lessThan) {
    this.lessThan = lessThan;
  }

  public IntTagFilter lessThanEquals(Integer lessThanEquals) {
    
    this.lessThanEquals = lessThanEquals;
    return this;
  }

   /**
   * Get lessThanEquals
   * @return lessThanEquals
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LESS_THAN_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLessThanEquals() {
    return lessThanEquals;
  }


  @JsonProperty(JSON_PROPERTY_LESS_THAN_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLessThanEquals(Integer lessThanEquals) {
    this.lessThanEquals = lessThanEquals;
  }

  public IntTagFilter greaterThan(Integer greaterThan) {
    
    this.greaterThan = greaterThan;
    return this;
  }

   /**
   * Get greaterThan
   * @return greaterThan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GREATER_THAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGreaterThan() {
    return greaterThan;
  }


  @JsonProperty(JSON_PROPERTY_GREATER_THAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGreaterThan(Integer greaterThan) {
    this.greaterThan = greaterThan;
  }

  public IntTagFilter greaterThanEquals(Integer greaterThanEquals) {
    
    this.greaterThanEquals = greaterThanEquals;
    return this;
  }

   /**
   * Get greaterThanEquals
   * @return greaterThanEquals
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GREATER_THAN_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGreaterThanEquals() {
    return greaterThanEquals;
  }


  @JsonProperty(JSON_PROPERTY_GREATER_THAN_EQUALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGreaterThanEquals(Integer greaterThanEquals) {
    this.greaterThanEquals = greaterThanEquals;
  }

  @Override
  public IntTagFilter type(String type) {
    this.setType(type);
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntTagFilter intTagFilter = (IntTagFilter) o;
    return Objects.equals(this.equals, intTagFilter.equals) &&
        Objects.equals(this.lessThan, intTagFilter.lessThan) &&
        Objects.equals(this.lessThanEquals, intTagFilter.lessThanEquals) &&
        Objects.equals(this.greaterThan, intTagFilter.greaterThan) &&
        Objects.equals(this.greaterThanEquals, intTagFilter.greaterThanEquals) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equals, lessThan, lessThanEquals, greaterThan, greaterThanEquals, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntTagFilter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    equals: ").append(toIndentedString(equals)).append("\n");
    sb.append("    lessThan: ").append(toIndentedString(lessThan)).append("\n");
    sb.append("    lessThanEquals: ").append(toIndentedString(lessThanEquals)).append("\n");
    sb.append("    greaterThan: ").append(toIndentedString(greaterThan)).append("\n");
    sb.append("    greaterThanEquals: ").append(toIndentedString(greaterThanEquals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

