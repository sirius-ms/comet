/*
 * SIRIUS Nightsky API
 * REST API that provides the full functionality of SIRIUS and its web services as background service. It is intended as entry-point for scripting languages and software integration SDKs.This API is exposed by SIRIUS 6
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.unijena.bioinf.ms.nightsky.sdk.api;

import de.unijena.bioinf.ms.nightsky.sdk.model.AlignedFeatureOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.Compound;
import de.unijena.bioinf.ms.nightsky.sdk.model.CompoundImport;
import de.unijena.bioinf.ms.nightsky.sdk.model.CompoundOptField;
import de.unijena.bioinf.ms.nightsky.sdk.model.InstrumentProfile;
import de.unijena.bioinf.ms.nightsky.sdk.model.PageCompound;
import de.unijena.bioinf.ms.nightsky.sdk.model.TraceSet;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for CompoundsApi
 */
@Ignore
public class CompoundsApiTest {

    private final CompoundsApi api = new CompoundsApi();

    
    /**
     * Import Compounds and its contained features.
     *
     * Import Compounds and its contained features. Compounds and Features must not exist in the project.  Otherwise, they will exist twice.
     */
    @Test
    public void addCompoundsTest()  {
        String projectId = null;
        List<CompoundImport> compoundImport = null;
        InstrumentProfile profile = null;
        List<CompoundOptField> optFields = null;
        List<AlignedFeatureOptField> optFieldsFeatures = null;
        List<Compound> response = api.addCompounds(projectId, compoundImport, profile, optFields, optFieldsFeatures);

        // TODO: test validations
    }
    
    /**
     * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
     *
     * Delete compound (group of ion identities) with the given identifier (and the included features) from the  specified project-space.
     */
    @Test
    public void deleteCompoundTest()  {
        String projectId = null;
        String compoundId = null;
        api.deleteCompound(projectId, compoundId);

        // TODO: test validations
    }
    
    /**
     * Get compound (group of ion identities) with the given identifier from the specified project-space.
     *
     * Get compound (group of ion identities) with the given identifier from the specified project-space.
     */
    @Test
    public void getCompoundTest()  {
        String projectId = null;
        String compoundId = null;
        List<CompoundOptField> optFields = null;
        List<AlignedFeatureOptField> optFieldsFeatures = null;
        Compound response = api.getCompound(projectId, compoundId, optFields, optFieldsFeatures);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getCompoundTracesTest()  {
        String projectId = null;
        String compoundId = null;
        String featureId = null;
        TraceSet response = api.getCompoundTraces(projectId, compoundId, featureId);

        // TODO: test validations
    }
    
    /**
     * List of all available compounds (group of ion identities) in the given project-space.
     *
     * List of all available compounds (group of ion identities) in the given project-space.
     */
    @Test
    public void getCompoundsTest()  {
        String projectId = null;
        List<CompoundOptField> optFields = null;
        List<AlignedFeatureOptField> optFieldsFeatures = null;
        List<Compound> response = api.getCompounds(projectId, optFields, optFieldsFeatures);

        // TODO: test validations
    }
    
    /**
     * Page of available compounds (group of ion identities) in the given project-space.
     *
     * Page of available compounds (group of ion identities) in the given project-space.
     */
    @Test
    public void getCompoundsPagedTest()  {
        String projectId = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        List<CompoundOptField> optFields = null;
        List<AlignedFeatureOptField> optFieldsFeatures = null;
        PageCompound response = api.getCompoundsPaged(projectId, page, size, sort, optFields, optFieldsFeatures);

        // TODO: test validations
    }
    
}
